name: CI
on:
  - push
  - pull_request
jobs:
  os-test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    # don't run on draft PRs
    if: ${{ github.event_name == 'push' || !github.event.pull_request.draft }}
    strategy:
      fail-fast: true
      max-parallel: 2
      matrix:
        version: ['1']
        os: [windows-latest, macOS-latest]
        arch: ["x64"]
    steps:
      - uses: actions/checkout@v4
      - name: "Setup Julia"
        uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: actions/cache@v4
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-

      - name: Build Snowflurry
        uses: julia-actions/julia-buildpkg@v1

      - name: Test Snowflurry
        uses: julia-actions/julia-runtest@v1

  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ubuntu-latest
     # don't run on draft PRs
    if: ${{ github.event_name == 'push' || !github.event.pull_request.draft }}
    strategy:
      fail-fast: true
      max-parallel: 2
      matrix:
        version: ['lts', '1']
        arch: ["x64"]
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: actions/cache@v4
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-

      - name: Build Snowflurry
        uses: julia-actions/julia-buildpkg@v1

      - name: Test Snowflurry
        uses: julia-actions/julia-runtest@v1

      - uses: julia-actions/julia-processcoverage@v1
        with:
          directories: src
      - uses: codecov/codecov-action@v2
        with:
          files: lcov.info

  thunderhead-ci:
    name: Thunderhead CI Test using Tutorials- ${{ github.event_name }}
    # GitHub does not support having environment variables isolated to jobs. To
    # get that effect we use the thunderhead environment to isolate credentials
    # to submit CI/CD jobs and not to deploy to the thunderhead environment.
    runs-on: ubuntu-latest
    environment: thunderhead-dev
    # don't run on draft PRs
    if: ${{ github.event_name == 'push' || !github.event.pull_request.draft }}
    strategy:
      fail-fast: true
      max-parallel: 2
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@latest
        with:
              version: '1'
      - name: Install dependencies
        uses: julia-actions/julia-buildpkg@v1

      - name: Run examples
        # this step is allowed to fail and failure does not cause the global workflow to fail
        continue-on-error: true
        run: julia --project=. -e  'include("tutorials/run_tutorials.jl");'
        env:
              THUNDERHEAD_USER: ${{  secrets.THUNDERHEAD_USER }}
              THUNDERHEAD_API_TOKEN: ${{  secrets.THUNDERHEAD_API_TOKEN }}
              THUNDERHEAD_HOST: ${{ secrets.THUNDERHEAD_HOST }}
              THUNDERHEAD_PROJECT_ID: ${{ secrets.THUNDERHEAD_PROJECT_ID }}
              THUNDERHEAD_REALM: ${{ secrets.THUNDERHEAD_REALM }}

  format:
    name: JuliaFormatter on Julia 1 - x64 - ${{ github.event_name }}
    runs-on: ubuntu-latest
    # don't run on draft PRs
    if: ${{ github.event_name == 'push' || !github.event.pull_request.draft }}
    strategy:
      fail-fast: true
      max-parallel: 2
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
          arch: "x64"
      - name: Format Snowflurry
        run: |
          julia -e 'import Pkg; Pkg.add("JuliaFormatter")'
          julia -e 'using JuliaFormatter; print("Running JuliaFormatter.format()..."); format(".")'
          echo "Checking for differences..."
          git diff --exit-code
          echo "No differences found -- SUCCESS"

